{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","state","editMode","status","props","onStatusChange","e","setState","currentTarget","value","this","updateUserStatus","prevProps","prevState","snapshot","onDoubleClick","activateEditMode","bind","className","classes","aboutMe","autoFocus","onBlur","deactivateEditMode","onChange","React","Component","ProfileInfo","profile","description","avaProfile","src","photos","large","userPhoto","infoProfile","name","fullName","contact","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Preloader","Post","item","avaPost","ava","messagePost","message","likeCounte","like","maxLenght","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","MyPostsContainer","connect","posts","profilePage","dispatch","addPost","text","postsElements","map","p","allPosts","formData","newPostTextBody","Profile","ProfileContainer","userId","match","params","String","authorized","history","push","getUserProfile","getUserStatus","compose","withAuthRedirect","isAuth","auth","data","id","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,WAAa,gCAAgC,YAAc,iCAAiC,WAAa,gCAAgC,YAAc,iCAAiC,KAAO,0BAA0B,QAAU,6BAA6B,QAAU,+B,oBCA5RD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,SAAW,4B,oBCA5DD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,YAAc,0BAA0B,QAAU,wB,oJCQjFC,EAAb,4MACIC,MAAQ,CACJC,UAAU,EACVC,OAAQ,EAAKC,MAAMD,QAH3B,EAmBIE,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACJ,OAAQG,EAAEE,cAAcC,SApB/C,sDAMI,WACIC,KAAKH,SAAS,CACVL,UAAU,MARtB,gCAYI,WACIQ,KAAKH,SAAS,CACVL,UAAU,IAEdQ,KAAKN,MAAMO,iBAAiBD,KAAKT,MAAME,UAhB/C,gCAuBI,SAAmBS,EAAgCC,EAAyBC,GACpEF,EAAUT,SAAWO,KAAKN,MAAMD,QAChCO,KAAKH,SAAS,CACVJ,OAAQO,KAAKN,MAAMD,WA1BnC,oBAgCI,WACI,OACI,iCACMO,KAAKT,MAAMC,UACb,qBAAKa,cAAeL,KAAKM,iBAAiBC,KAAKP,MAC1CQ,UAAWC,IAAQC,QADxB,SACkCV,KAAKN,MAAMD,QAAU,cACtDO,KAAKT,MAAMC,UACZ,uBAAOmB,WAAS,EACTC,OAAQZ,KAAKa,mBAAmBN,KAAKP,MACrCD,MAAOC,KAAKT,MAAME,OAClBqB,SAAUd,KAAKL,wBA1CtC,GAAmCoB,IAAMC,WCK5BC,EAAc,SAACvB,GACxB,OAAKA,EAAMwB,QAIP,8BAII,sBAAKV,UAAWC,IAAQU,YAAxB,UACI,qBAAKX,UAAWC,IAAQW,WACnBC,IAAK3B,EAAMwB,QAAQI,OAAOC,MAAQ7B,EAAMwB,QAAQI,OAAOC,MAAQC,MACpE,sBAAKhB,UAAWC,IAAQgB,YAAxB,UACI,qBAAKjB,UAAWC,IAAQiB,KAAxB,SAA+BhC,EAAMwB,QAAQS,WAE7C,cAAC,EAAD,CAAelC,OAAQC,EAAMD,OAAQQ,iBAAkBP,EAAMO,mBAE7D,uBACA,sBAAKO,UAAWC,IAAQC,QAAxB,sBAA2ChB,EAAMwB,QAAQR,WACzD,uBACA,sBAAKF,UAAWC,IAAQmB,QAAxB,UACI,6CAAgBlC,EAAMwB,QAAQW,SAASC,YACvC,4CAAepC,EAAMwB,QAAQW,SAASE,WACtC,uCAAUrC,EAAMwB,QAAQW,SAASG,MACjC,4CAAetC,EAAMwB,QAAQW,SAASI,WACtC,8CAAiBvC,EAAMwB,QAAQW,SAASK,aACxC,4CAAexC,EAAMwB,QAAQW,SAASM,WACtC,2CAAczC,EAAMwB,QAAQW,SAASO,UACrC,6CAAgB1C,EAAMwB,QAAQW,SAASQ,uBA1BhD,cAACC,EAAA,EAAD,K,oCCWAC,EAnBkB,SAAC7C,GAC9B,OACI,sBAAKc,UAAWC,IAAQ+B,KAAxB,UACI,sBAAKhC,UAAWC,IAAQgC,QAAxB,UACI,qBAAKjC,UAAWC,IAAQiC,IAAxB,SACI,qBAAKrB,IAAI,mFAEb,qBAAKb,UAAWC,IAAQkC,YAAxB,SACKjD,EAAMkD,aAGf,qBAAKpC,UAAWC,IAAQoC,WAAxB,SACI,yCAAYnD,EAAMoD,c,kCCZ5BC,EAAYC,YAAiB,IAmBtBC,EAAsBC,YAAwB,CAACC,KAAM,yBAA/BD,EAhB+B,SAACxD,GAG/D,OACI,uBAAM0D,SAAU1D,EAAM2D,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACX9B,KAAM,kBACN+B,SAAU,CAACC,IAAUX,GACrBY,YAAa,iBAEpB,oD,QCcCC,EAAmBC,aAdR,SAACtE,GACrB,MAAO,CACHuE,MAAOvE,EAAMwE,YAAYD,UAIN,SAACE,GACxB,MAAO,CACHC,QAAS,SAACC,GACNF,EAASC,YAAQC,QAKGL,EC5BT,SAACnE,GAEpB,IAAIyE,EAAgBzE,EAAMoE,MAAMM,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAMzB,QAASyB,EAAEzB,QAASE,KAAMuB,EAAEvB,UAM7E,OACI,sBAAKtC,UAAWC,IAAQ6D,SAAxB,UACI,0CACA,cAACrB,EAAD,CAAqBG,SAPZ,SAACmB,GACd7E,EAAMuE,QAAQM,EAASC,oBAOnB,qBAAKhE,UAAWC,IAAQqD,MAAxB,SACKK,UCTJM,EAAiC,SAAC/E,GAC3C,OACI,gCACI,cAAC,EAAD,CAAawB,QAASxB,EAAMwB,QAASzB,OAAQC,EAAMD,OAAQQ,iBAAkBP,EAAMO,mBACnF,cAAC2D,EAAD,Q,uBCwBNc,E,uKAEF,WACI,IAAIC,EAAS3E,KAAKN,MAAMkF,MAAMC,OAAOF,OAChCA,IAEDA,EAASG,OAAO9E,KAAKN,MAAMqF,cAEvB/E,KAAKN,MAAMsF,QAAQC,KAAK,UAGhCjF,KAAKN,MAAMwF,eAAeP,GAC1B3E,KAAKN,MAAMyF,cAAcR,K,oBAG7B,WACI,OAAO,cAAC,EAAD,2BAAa3E,KAAKN,OAAlB,IACSwB,QAASlB,KAAKN,MAAMwB,QACpBzB,OAAQO,KAAKN,MAAMD,OACnBQ,iBAAkBD,KAAKN,MAAMO,wB,GAnBtBc,IAAMC,WAmCtBoE,sBACXC,IACAxB,aAboB,SAACtE,GAA2C,IAAD,EAC/D,MAAO,CACHuE,MAAOvE,EAAMwE,YAAYD,MACzB5C,QAAS3B,EAAMwE,YAAY7C,QAC3BzB,OAAQF,EAAMwE,YAAYtE,OAC1B6F,OAAQ/F,EAAMgG,KAAKD,OACnBP,WAAU,UAAExF,EAAMgG,KAAKC,YAAb,aAAE,EAAiBC,MAOR,CACrBxB,YACAiB,mBACAC,kBACAlF,uBAEJyF,IARWN,CAQCV","file":"static/js/4.72f51dca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileImg\":\"ProfileInfo_profileImg__3mXT7\",\"description\":\"ProfileInfo_description__2yWda\",\"avaProfile\":\"ProfileInfo_avaProfile__2EytA\",\"infoProfile\":\"ProfileInfo_infoProfile__3U6TA\",\"name\":\"ProfileInfo_name__1VvQB\",\"aboutMe\":\"ProfileInfo_aboutMe__1mww3\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3tZ1c\",\"allPosts\":\"MyPosts_allPosts__3ikYf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\",\"messagePost\":\"Post_messagePost__IMlY-\",\"avaPost\":\"Post_avaPost__2Lx-N\"};","import React, {ChangeEvent} from 'react';\nimport classes from './../ProfileInfo.module.css'\n\ntype PropsType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\n\nexport class ProfileStatus extends React.Component<PropsType> {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activateEditMode() {\n        this.setState({\n            editMode: true\n        })\n    }\n\n    deactivateEditMode() {\n        this.setState({\n            editMode: false\n        })\n        this.props.updateUserStatus(this.state.status)\n    }\n\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {  //стрелка чтобы не потерять this\n        this.setState({status: e.currentTarget.value})\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (prevProps.status !== this.props.status) {\n            this.setState({\n                status: this.props.status\n            })\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                <div onDoubleClick={this.activateEditMode.bind(this)}\n                     className={classes.aboutMe}>{this.props.status || \"no status\"}</div>}\n                {this.state.editMode &&\n                <input autoFocus\n                       onBlur={this.deactivateEditMode.bind(this)}\n                       value={this.state.status}\n                       onChange={this.onStatusChange}\n                />\n                }\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport classes from './ProfileInfo.module.css'\nimport {UserProfileDataType} from \"../../../redux/profile-reducer\";\nimport userPhoto from './../../../assets/images/abstract-user-flat-4.svg'\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\n\ntype PropsType = {\n    profile: UserProfileDataType\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\n\nexport const ProfileInfo = (props: PropsType) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            {/*  <div className={classes.profileImg}>\n                <img src='https://www.tourdom.ru/upload/iblock/c67/c67d37818296f908f1ba70503667e48c.jpeg'/>\n            </div>*/}\n            <div className={classes.description}>\n                <img className={classes.avaProfile}\n                     src={props.profile.photos.large ? props.profile.photos.large : userPhoto}/>\n                <div className={classes.infoProfile}>\n                    <div className={classes.name}>{props.profile.fullName}</div>\n\n                    <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\n\n                    <hr></hr>\n                    <div className={classes.aboutMe}>aboutMe: {props.profile.aboutMe}</div>\n                    <hr></hr>\n                    <div className={classes.contact}>\n                        <div>facebook: {props.profile.contacts.facebook}</div>\n                        <div>website: {props.profile.contacts.website}</div>\n                        <div>vk: {props.profile.contacts.vk}</div>\n                        <div>twitter: {props.profile.contacts.twitter}</div>\n                        <div>instagram: {props.profile.contacts.instagram}</div>\n                        <div>youtube: {props.profile.contacts.youtube}</div>\n                        <div>github: {props.profile.contacts.github}</div>\n                        <div>mainLink: {props.profile.contacts.mainLink}</div>\n                    </div>\n                    {/*                    <div className={classes.lookingForAJo}>lookingForAJob</div>\n                    <div className={classes.lookingForAJobDescription}>lookingForAJobDescription</div>\n                    <div className={classes.fullName}>fullName</div>*/}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport classes from './Post.module.css'\n\ntype PostType = {\n    message: string\n    like: number\n}\n\nconst Post: React.FC<PostType> = (props) => {\n    return (\n        <div className={classes.item}>\n            <div className={classes.avaPost}>\n                <div className={classes.ava}>\n                    <img src='https://meragor.com/files/styles//220_220_bottom_wm/cherno-belye-avy-044.jpg'/>\n                </div>\n                <div className={classes.messagePost}>\n                    {props.message}\n                </div>\n            </div>\n            <div className={classes.likeCounte}>\n                <span>like {props.like}</span>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Post;","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nexport type FormDataType = {\n    newPostTextBody: string\n}\nconst maxLenght = maxLengthCreator(10)\n\n\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props: React.PropsWithChildren<InjectedFormProps<FormDataType, {}, string>>) => {\n\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea}\n                   name={\"newPostTextBody\"}\n                   validate={[required, maxLenght]}\n                   placeholder={\"Post message\"}\n            />\n            <button>Add post</button>\n        </form>\n    )\n\n}\n\nexport const AddNewPostReduxForm = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)","import React from 'react';\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {StateType} from \"../../../redux/redux-store\";\nimport {\n    ActionTypeProfileReducer,\n    addPost,\n    PostType\n} from \"../../../redux/profile-reducer\";\n\n\ntype MapStareToPropsType = {\n    posts: PostType[]\n}\n\ntype MapDispatchToPropsType = {\n    addPost: (text: string) => void\n}\n\nexport type MyPostsPropsType = MapStareToPropsType & MapDispatchToPropsType\n\nconst mapStareToProps = (state: StateType): MapStareToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n    }\n};\n\nconst mapDispatchToProps = (dispatch: (action: ActionTypeProfileReducer) => void): MapDispatchToPropsType => {\n    return {\n        addPost: (text: string) => {\n            dispatch(addPost(text))\n        },\n    }\n}\n\nexport const MyPostsContainer = connect(mapStareToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\nimport classes from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {AddNewPostReduxForm, FormDataType} from \"./AddNewPostForm\";\n\n\nexport const MyPosts = (props: MyPostsPropsType) => {\n\n    let postsElements = props.posts.map((p) => <Post message={p.message} like={p.like}/>)\n\n    const onSubmit = (formData: FormDataType) => {\n        props.addPost(formData.newPostTextBody)\n    }\n\n    return (\n        <div className={classes.allPosts}>\n            <h3>My Posts</h3>\n            <AddNewPostReduxForm onSubmit={onSubmit}/>\n            <div className={classes.posts}>\n                {postsElements}\n            </div>\n        </div>\n\n    )\n};","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {updateUserStatus, UserProfileDataType} from \"../../redux/profile-reducer\";\n\ntype ProfileType = {\n    profile: UserProfileDataType\n    status: string\n    updateUserStatus: (status: string)=>void\n}\n\nexport const Profile: React.FC<ProfileType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}","import React, {ComponentType} from 'react';\nimport {connect} from \"react-redux\";\nimport {Profile} from \"./Profile\";\nimport {StateType} from \"../../redux/redux-store\";\nimport {\n    addPost,\n    getUserProfile,\n    getUserStatus,\n    PostType,\n    updateUserStatus,\n    UserProfileDataType\n} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../HOC/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype MapStareToPropsType = {\n    posts: Array<PostType>\n    profile: UserProfileDataType\n    status: string\n    isAuth: boolean\n    authorized: number | null | undefined\n}\n\ntype MapDispatchToPropsType = {\n    addPost: (text: string) => void\n    getUserProfile: (userId: string) => void\n    getUserStatus: (userId: string) => void\n    updateUserStatus: (status: string) => void\n}\ntype PathParamsType = {\n    userId: string\n}\n\ntype PropsType = RouteComponentProps<PathParamsType> & UserPropsType\n\nexport type UserPropsType = MapStareToPropsType & MapDispatchToPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n           // userId = \"21108\"\n            userId = String(this.props.authorized)\n            if (!userId){\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getUserStatus(userId)\n    }\n\n    render() {\n        return <Profile {...this.props}\n                        profile={this.props.profile}\n                        status={this.props.status}\n                        updateUserStatus={this.props.updateUserStatus}\n        />\n    }\n}\n\nconst mapStareToProps = (state: StateType): MapStareToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        isAuth: state.auth.isAuth,\n        authorized: state.auth.data?.id,\n\n    }\n}\n\nexport default compose<ComponentType>(\n    withAuthRedirect,\n    connect(mapStareToProps, {\n        addPost,\n        getUserProfile,\n        getUserStatus,\n        updateUserStatus\n    }),\n    withRouter)(ProfileContainer)"],"sourceRoot":""}